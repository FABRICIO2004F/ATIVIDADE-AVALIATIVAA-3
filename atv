#include <stdio.h>
#include <stdlib.h>
#include <string.h>


typedef struct {
    int codigo;
    char descricao[50];
    int quantidade;
    float valor;
} Produto;


typedef struct No {
    Produto produto;
    struct No* proximo;
} NoEstoque;


NoEstoque* inicializarEstoque() {
    return NULL;
}


NoEstoque* adicionarProduto(NoEstoque* estoque) {
    Produto novoProduto;

    printf("Informe o código do produto: ");
    scanf("%d", &novoProduto.codigo);

    printf("Informe a descrição do produto: ");
    scanf("%s", novoProduto.descricao);

    printf("Informe a quantidade do produto: ");
    scanf("%d", &novoProduto.quantidade);

    printf("Informe o valor do produto: ");
    scanf("%f", &novoProduto.valor);

    NoEstoque* novoNo = (NoEstoque*)malloc(sizeof(NoEstoque));
    novoNo->produto = novoProduto;
    novoNo->proximo = estoque;

    return novoNo;
}


void relatorioProdutos(NoEstoque* estoque) {
    NoEstoque* atual = estoque;

    printf("\nRelatório de Produtos:\n");
    while (atual != NULL) {
        printf("Código: %d\n", atual->produto.codigo);
        printf("Descrição: %s\n", atual->produto.descricao);
        printf("Quantidade: %d\n", atual->produto.quantidade);
        printf("Valor: %.2f\n\n", atual->produto.valor);

        atual = atual->proximo;
    }
}


void consultarProduto(NoEstoque* estoque) {
    int codigoBusca;
    printf("Informe o código do produto a ser consultado: ");
    scanf("%d", &codigoBusca);

    NoEstoque* atual = estoque;
    while (atual != NULL) {
        if (atual->produto.codigo == codigoBusca) {
            printf("\nProduto encontrado:\n");
            printf("Código: %d\n", atual->produto.codigo);
            printf("Descrição: %s\n", atual->produto.descricao);
            printf("Quantidade: %d\n", atual->produto.quantidade);
            printf("Valor: %.2f\n", atual->produto.valor);
            return;
        }
        atual = atual->proximo;
    }

    printf("\nProduto não encontrado.\n");
}


NoEstoque* removerProduto(NoEstoque* estoque) {
    int codigoRemocao;
    printf("Informe o código do produto a ser removido: ");
    scanf("%d", &codigoRemocao);

    NoEstoque* anterior = NULL;
    NoEstoque* atual = estoque;

    while (atual != NULL) {
        if (atual->produto.codigo == codigoRemocao) {
            if (anterior == NULL) {
                
                NoEstoque* novoInicio = atual->proximo;
                free(atual);
                return novoInicio;
            } else {

                anterior->proximo = atual->proximo;
                free(atual);
                return estoque;
            }
        }

        anterior = atual;
        atual = atual->proximo;
    }

    printf("\nProduto não encontrado. Nada foi removido.\n");
    return estoque;
}

int main() {
    NoEstoque* estoque = inicializarEstoque();
    int opcao;

    do {
        printf("\nSistema de Controle de Estoque\n");
        printf("1. Adicionar Produto\n");
        printf("2. Consultar Produto\n");
        printf("3. Relatório de Produtos\n");
        printf("4. Remover Produto\n");
        printf("0. Sair\n");
        printf("Escolha a opção desejada: ");
        scanf("%d", &opcao);

        switch (opcao) {
            case 1:
                estoque = adicionarProduto(estoque);
                break;
            case 2:
                consultarProduto(estoque);
                break;
            case 3:
                relatorioProdutos(estoque);
                break;
            case 4:
                estoque = removerProduto(estoque);
                break;
            case 0:
                printf("Saindo do programa.\n");
                break;
            default:
                printf("Opção inválida. Tente novamente.\n");
        }
    } while (opcao != 0);

    NoEstoque* atual = estoque;
    while (atual != NULL) {
        NoEstoque* proximo = atual->proximo;
        free(atual);
        atual = proximo;
    }

    return 0;
}
